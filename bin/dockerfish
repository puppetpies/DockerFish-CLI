#!/usr/bin/ruby

########################################################################
#                                                                      #
# Author: Brian Hood                                                   #
# Description: DockerFish Automation                                   #
#                                                                      #
#                                                                      #
########################################################################

require File.expand_path(File.join(
          File.dirname(__FILE__),
          "../lib/dockerfish.rb"))
          
# GetOptLong remove argv value after processing so store to i can use it lower down.
argvstore = ARGV[0].to_s

trap("INT") {
  puts "\nSee you soon !"
  exit
}

def bookmarks(file)
  puts "\e[1;32mBookmarks\e[0m\ "
  puts "\e[1;32m=========\e[0m\ "
  puts "" 
  def read(file)
    b = 1
    @bookmarks = Array.new
    File.open("#{file}", 'r') {|n|
      n.each_line {|l|
        puts "\e[1;36m#{b})\e[0m\ #{l}"
        @bookmarks[b] = l.split(" ")[1]
        b = b + 1
      }
    }
  end
  if File.exists?("#{file}") 
    read(file)
  else
    # Add Localhost to your favourites as an example
    File.open("#{file}", 'w') {|n|
      n.puts("localhost http://localhost:2375")
    }
    read(file)
  end
  while buf4 = Readline.readline("\e[1;33m\Enter Bookmark>\e[0m\ ", true)
    puts @bookmarks[buf4.to_i]
    @bookmarkhost = @bookmarks[buf4.to_i]
    break
  end
end


opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--url', '-u', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--bookmarks', '-b', GetoptLong::NO_ARGUMENT ],
  [ '--start', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--stop', '-p', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--create', '-c', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--contimage', '-i', GetoptLong::REQUIRED_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
    when '--help'
      helper = "\e[1;34mWelcome to DockerFish Version #{VERSION}\e[0m\ \n"
      helper << "\e[1;34m=================================\e[0m\ "
      helper << %q[

-h, --help:
   show help

-u, -url Docker Host URL:
   Note: Docker Host must of API Enabled to connect
   Example: http://10.0.0.1:2375
   
   Defaults to http://localhost:2375
   
-b, --bookmarks
   Create .bookmarks file format
   
   Example:
   
   localhost http://127.0.0.1:2375
   remoteserver http://10.0.2.15:2375

-c --create
    Create container from image
    
-i --contimage
    Create many from your container.json parameters.

# Comma separated for multiple containers supported

-s --start
    Start up container name / Id

-p --stop
    Stop container name / Id
]
      puts helper
      exit
    when '--bookmarks'
      bookmarks("#{BOOKMARKSFILE}")
    when '--url'
      @dockerurl = arg
    when '--start'
      @action = "start"
      @container = arg
    when '--stop'
      @action = "stop"
      @container = arg
    when '--create'
      @action = "create"
      @container = arg
    when '--contimage'
      @image = arg
  end
end

class Integer

  def to_filesize
    conv = [ 'B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB' ];
    scale = 1024;

    ndx=1
    if( self < 2*(scale**ndx)  ) then
      return "#{(size)}#{conv[ndx-1]}"
    end
    size=self.to_f
    [2,3,4,5,6,7].each do |ndx|
      if( size < 2*(scale**ndx)  ) then
        return "#{'%.3f' % (size/(scale**(ndx-1)))}#{conv[ndx-1]}"
      end
    end
    ndx=7
    return "#{'%.3f' % (size/(scale**(ndx-1)))}#{conv[ndx-1]}"  
  end
  
end

# Client

if argvstore.size > 0
  obj = FishControl.new
  if defined? @action
    if @image
      obj.containerctl(@container, @action, @image)
    else
      obj.containerctl(@container, @action)
    end
  end
elsif argvstore.size == 0
  obj = DockerFish.new(true)
  if defined? @dockerurl; obj.baseurl = @dockerurl; end
  if defined? @bookmarkhost; obj.baseurl = @bookmarkhost; end
  obj.apicall("menu")
end
